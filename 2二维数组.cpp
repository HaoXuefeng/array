//
//# include <iostream>
//using namespace std;
//
//					//	二维数组：
////		数据类型 数组名 [行数][列数];
////		数据类型 数组名 [行数][列数] = { {数据1, 数据2,..}, {数据1, 数据2,..}, .. }
////		数据类型 数组名 [行数][列数] = { 数据1, 数据2, 数据3, .. }
////		数据类型 数组名 [][列数] = { 数据1, 数据2, 数据3, .. }
//					//	以上4种定义方式，第2种最直观，更能提高代码的可读性
//int main() {
//	//第一种方法
//	/*int arr1[2][3];
//	arr1[0][0] = 1;
//	arr1[0][1] = 2;
//	arr1[0][2] = 3;
//	arr1[1][0] = 4;
//	arr1[1][1] = 5;
//	arr1[1][2] = 6;
//	for (int i = 0; i < 2; i++) {
//		for (int j = 0; j < 3; j++) {
//			cout << arr1[i][j] << "  ";
//		}
//		cout << endl;
//	}*/
//	//第二种方法
//	/*int arr2[2][3] = {
//		{ 1, 2, 3 },
//		{ 4, 5, 6 }
//	};
//	for (int i = 0; i < 2; i++) {
//		for (int j = 0; j < 3; j++) {
//			cout << arr2[i][j] << "  ";
//		}
//		cout << endl;
//	}*/
//	//第三种方法
//	/*int arr3[2][3] = { 1,2,3,4,5,6 };
//	for (int i = 0; i < 2; i++) {
//		for (int j = 0; j < 3; j++) {
//			cout << arr3[i][j] << "  ";
//		}
//		cout << endl;
//	}*/
//	//	第四种方法
//	/*int arr4[][3] = { 1,2,3,4,5,6 };
//	for (int i = 0; i < 2; i++) {
//		for (int j = 0; j < 3; j++) {
//			cout << arr4[i][j] << "  ";
//		}
//		cout << endl;
//	}*/
//
//								//	数组名：	1、查看二维数组所占内存空间
//								//			2、查看二维数组的首地址
//	int arr[2][3] = {
//		{ 1, 2, 3 },
//		{ 4, 5, 6 }
//	};
//	cout << "二维数组所占内存空间：" << sizeof(arr) << endl;
//	cout << "二维数组第一行所占内存空间：" << sizeof(arr[0]) << endl;
//	cout << "二维数组第一个元素所占内存空间：" << sizeof(arr[0][0]) << endl;
//	//有以上三个数据，可以得知二维数组有多少行多少列：
//	//	行数：sizeof(arr) / sizeof(arr[0]); 列数：sizeof(arr[0])/sizeof(arr[0][0]); 
//
//	//获取地址：
//	cout << "二维数组的首地址是：" << arr << endl;		//	数组名就是数组地址！
//	cout << "二维数组第一行的首地址是：" << arr[0] << endl;
//	cout << "二维数组第二行的首地址是：" << arr[1]<< endl;			//如果转化为int类型，可以看到他们相差 12，为什么？
//	cout << "二维数组第一个元素的首地址是：" << arr[0][0] << endl;
//
//	system("pause");
//	return 0;
//}
